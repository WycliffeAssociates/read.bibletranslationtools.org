# This is a basic workflow to help you get started with Actions

name: Upload develop changes to Azure Storage

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ develop ]
env:
  STORAGEACCOUNTNAME: testpipelineoutput
  TEMPLATECONTAINER: template
  WEBCONTAINER: $web
  DEPLOYDIR: deploy
  CDNPROFILENAME: readdevbibletranslationtoolsorg
  CDNENDPOINT: readdevbibletranslationtoolsorg
  CDNRESOURCEGROUP: ScripturePipeline-Dev

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{secrets.AZUREDEPLOYKEY}}

      # Runs a single command using the runners shell
      - name: Install depencies
        run: sudo apt-get update && export DEBIAN_FRONTEND=noninteractive && sudo apt-get -y install ruby ruby-dev build-essential zlib1g-dev && sudo gem install bundler
      - name: Run build.sh
        run: chmod u+x ./build.sh && ./build.sh
      - name: Upload template
        uses: azure/CLI@v1
        with: 
          inlineScript: |
            az storage blob upload-batch --account-name ${{env.STORAGEACCOUNTNAME}} --auth-mode key -d ${{env.TEMPLATECONTAINER}} -s "./_site/templates/"
      - name: Create deploy folder
        run: mkdir ${{env.DEPLOYDIR}} && cp -r _site/css/ ${{env.DEPLOYDIR}} && cp -r _site/js/ ${{env.DEPLOYDIR}} && cp -r _site/fonts/ ${{env.DEPLOYDIR}} && cp _site/*.html ${{env.DEPLOYDIR}}
      - name: Upload resources
        uses: azure/CLI@v1
        with: # The single quote around the -d option is needed because otherwise it fails on $web
          inlineScript: |
            az storage blob upload-batch --account-name ${{env.STORAGEACCOUNTNAME}} --auth-mode "key" -d '${{env.WEBCONTAINER}}' -s ${{env.DEPLOYDIR}} --overwrite
      - name: Purge CDN endpoint
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az cdn endpoint purge --content-paths  "/*" --profile-name ${{env.CDNPROFILENAME}} --name "${{env.CDNENDPOINT}}" --resource-group "${{env.CDNRESOURCEGROUP}}"
      - name: logout
        run: |
              az logout
        if: always()